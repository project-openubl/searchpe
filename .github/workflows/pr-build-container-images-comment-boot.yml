name: PR build container images comment by boot
on: pull_request

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - name: Set up token
        id: token
        # This is a base64-encoded OAuth token for the "project-openubl-preview-bot" GitHub account, which has no secure access.
        run: echo "::set-output name=GH_TOKEN::`echo 'Z2hwX2Z0VnB1MmdQdXYxSldsMm9nZkoyOFMydzdDTEZvNjBOQXVIZAo=' | base64 -d`"
      - name: Post Container image as PR comment
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            ðŸš€ Container image Preview âœ¨

            The creation of the container image might take aproximately 10 minutes. Once it is available you can pull it using:
            ```shell
            docker pull ghcr.io/${{github.event.pull_request.head.repo.full_name}}/${{github.event.repository.name}}:${{github.event.pull_request.head.ref}}
            docker pull ghcr.io/${{github.event.pull_request.head.repo.full_name}}/${{github.event.repository.name}}-enterprise:${{github.event.pull_request.head.ref}}
            ```

            - To watch the current status of the container image creation visit [Workflow runs](https://github.com/${{github.event.pull_request.head.repo.full_name}}/actions/workflows/pr-build-container-images.yml?query=branch%3A${{github.event.pull_request.head.ref}})
            - To see the list of packages created by the boot visit [Packages](https://github.com/${{github.event.pull_request.head.repo.full_name}}/packages)
            
            ---
            <details>
              <summary>Docker compose</summary>
              <br />
            
              ```yaml
              version: "3"
              services:
                postgresql:
                  image: postgres:13.1
                  ports:
                    - 5432:5432
                  environment:
                    POSTGRES_DB: searchpe_db
                    POSTGRES_USER: db_username
                    POSTGRES_PASSWORD: db_password
                  healthcheck:
                    test: [ "CMD-SHELL", "pg_isready -U db_username -d searchpe_db" ]
                    interval: 10s
                    timeout: 5s
                    retries: 5
              
                searchpe:
                  image: quay.io/projectopenubl/searchpe:early-access
                  ports:
                    - 8180:8080
                  environment:
                    QUARKUS_HTTP_PORT: 8080
                    QUARKUS_DATASOURCE_USERNAME: db_username
                    QUARKUS_DATASOURCE_PASSWORD: db_password
                    QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgresql:5432/searchpe_db
                  healthcheck:
                    test: [ "CMD", "curl", "-f", "http://localhost:8080/q/health" ]
                    interval: 10s
                    timeout: 5s
                    retries: 5
                  depends_on:
                    postgresql:
                      condition: service_healthy
              ```                                  
            </details>
            
            <details>
              <summary>Docker compose - enterprise</summary>
              <br />

              ```yaml
              version: "3"
              services:
                postgresql:
                  image: postgres:13.1
                  environment:
                    POSTGRES_DB: searchpe_db
                    POSTGRES_USER: db_username
                    POSTGRES_PASSWORD: db_password
                  network_mode: "host"
                  healthcheck:
                    test: [ "CMD-SHELL", "pg_isready -U db_username -d searchpe_db" ]
                    interval: 10s
                    timeout: 5s
                    retries: 5
              
                elasticsearch:
                  image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
                  environment:
                    discovery.type: single-node
                  network_mode: "host"
                  healthcheck:
                    test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
                    interval: 10s
                    timeout: 5s
                    retries: 5
              
                keycloak:
                  image: quay.io/keycloak/keycloak:15.0.2
                  environment:
                    KEYCLOAK_USER: admin
                    KEYCLOAK_PASSWORD: admin
                    KEYCLOAK_IMPORT: /tmp/openubl-realm.json
                    DB_VENDOR: h2
                  volumes:
                    - ./src/main/resources/openubl-realm.json:/tmp/openubl-realm.json:z
                  command:
                    - "-Djboss.bind.address.private=127.0.0.1"
                    - "-Djboss.bind.address=0.0.0.0"
                  network_mode: "host"
                  healthcheck:
                    test: [ "CMD", "curl", "-f", "http://localhost:8080/auth" ]
                    interval: 10s
                    timeout: 5s
                    retries: 5
              
                searchpe:
                  image: quay.io/projectopenubl/searchpe-enterprise:early-access
                  environment:
                    QUARKUS_HTTP_PORT: 8180
                    QUARKUS_DATASOURCE_USERNAME: db_username
                    QUARKUS_DATASOURCE_PASSWORD: db_password
                    QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://localhost:5432/searchpe_db
                    QUARKUS_OIDC_ENABLED: "true"
                    QUARKUS_OIDC_AUTH_SERVER_URL: http://localhost:8080/auth/realms/openubl
                    QUARKUS_OIDC_CLIENT_ID: searchpe
                    QUARKUS_OIDC_CREDENTIALS_SECRET: secret
                    QUARKUS_HIBERNATE_SEARCH_ORM_ELASTICSEARCH_USERNAME: any
                    QUARKUS_HIBERNATE_SEARCH_ORM_ELASTICSEARCH_PASSWORD: any
                    QUARKUS_HIBERNATE_SEARCH_ORM_ELASTICSEARCH_PROTOCOL: HTTP
                    QUARKUS_HIBERNATE_SEARCH_ORM_ELASTICSEARCH_HOSTS: localhost:9200
                    QUARKUS_HIBERNATE_SEARCH_ORM_ELASTICSEARCH_VERSION: 7
                  healthcheck:
                    test: [ "CMD", "curl", "-f", "http://localhost:8080/q/health" ]
                    interval: 10s
                    timeout: 5s
                    retries: 5
                  network_mode: "host"
                  depends_on:
                    postgresql:
                      condition: service_healthy
                    elasticsearch:
                      condition: service_healthy
                    keycloak:
                      condition: service_healthy
              ```                                  
            </details>
          repo-token: ${{ steps.token.outputs.GH_TOKEN }}
