name: CI

on:
  push:
    branches-ignore:
      - "dependabot/**"
    paths-ignore:
      - "README.md"
  pull_request:
    paths-ignore:
      - "README.md"

jobs:
#  jvm-tests:
#    name: JVM Tests
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v3
#        with:
#          java-version: 17
#          distribution: temurin
#          cache: maven
#      - name: Maven
#        run: mvn test
#
#  native-tests:
#    name: Native Tests
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v3
#        with:
#          java-version: 17
#          distribution: temurin
#          cache: maven
#      - name: Build with Maven
#        run: mvn verify -Dquarkus.native.container-build=true -P native
#
#  ui-tests:
#    name: UI Tests
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        node-version: [ 16 ]
#    steps:
#      - uses: actions/checkout@v3
#      - name: Use Node.js ${{ matrix.node-version }}
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ matrix.node-version }}
#      - name: Build
#        working-directory: application/src/main/webapp
#        run: |
#          npm install
#          npm run build
#      - name: Test
#        working-directory: application/src/main/webapp
#        run: npm run test -- --coverage --watchAll=false

  application-container:
    name: Application container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven
      - name: Build container image
        run: |
          mvn -U -B package --file pom.xml -DskipTests \
          -Dquarkus.native.container-build=true \
          -Dquarkus.container-image.push=false \
          -Dquarkus.container-image.build=true \
          -Dquarkus.container-image.registry=quay.io \
          -Dquarkus.container-image.group=projectopenubl \
          -Dquarkus.container-image.name=searchpe \
          -Dquarkus.container-image.tag=test \
          -P ui \
          -pl application
      - name: Save container image
        run: docker save -o searchpe-application-container-image.tar quay.io/projectopenubl/searchpe:test
      - name: Upload container image
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: searchpe-application-container-image.tar

  operator-container:
    name: Operator container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven
      - name: Build container image
        run: |
          mvn -U -B package --file pom.xml -DskipTests \
          -Dquarkus.native.container-build=true \
          -Dquarkus.container-image.push=false \
          -Dquarkus.container-image.build=true \
          -Dquarkus.container-image.registry=quay.io \
          -Dquarkus.container-image.group=projectopenubl \
          -Dquarkus.container-image.name=searchpe-operator \
          -Dquarkus.container-image.tag=test \
          -pl operator
      - name: Save container image
        run: docker save -o searchpe-operator-container-image.tar quay.io/projectopenubl/searchpe-operator:test
      - name: Upload container image
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: searchpe-operator-container-image.tar

  catalog-container:
    name: Catalog container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven
      - name: Install OPM
        run: |
          export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
          export OS=$(uname | awk '{print tolower($0)}')
          
          export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-registry/releases/download/v1.26.2
          curl -LO ${OPERATOR_SDK_DL_URL}/${OS}-${ARCH}-opm
          chmod +x ${OS}-${ARCH}-opm && sudo mv ${OS}-${ARCH}-opm /usr/local/bin/opm
      - name: Build container image
        run: |
          mvn -U -B package --file pom.xml -DskipTests \
          -Dquarkus.native.container-build=false \
          -Dquarkus.container-image.push=false \
          -Dquarkus.container-image.build=false \
          -Dquarkus.container-image.registry=quay.io \
          -Dquarkus.container-image.group=projectopenubl \
          -Dquarkus.container-image.name=searchpe-operator \
          -Dquarkus.operator-sdk.bundle.package-name=searchpe-operator \
          -Dquarkus.operator-sdk.bundle.channels=alpha \
          -Dquarkus.application.version=test \
          -Dquarkus.kubernetes.image-pull-policy=if-not-present \
          -Dquarkus.kubernetes.env.vars.operator-searchpe-image=quay.io/projectopenubl/searchpe:test \
          -Dquarkus.kubernetes.env.vars.operator-searchpe-image-pull-policy=IfNotPresent \
          -pl operator
      - name: Create bundle image
        run: |
          # Bundle
          BUNDLE_IMAGE=quay.io/projectopenubl/searchpe-operator-bundle:test
          docker build -t $BUNDLE_IMAGE -f operator/target/bundle/searchpe-operator/bundle.Dockerfile operator/target/bundle/searchpe-operator
          
          # Catalog
          CATALOG_IMAGE=quay.io/projectopenubl/searchpe-operator-catalog:test
          opm index add --bundles $BUNDLE_IMAGE --tag $CATALOG_IMAGE --build-tool docker --permissive

          # Save container images
          docker save -o searchpe-bundle-container-image.tar $BUNDLE_IMAGE
          docker save -o searchpe-catalog-container-image.tar $CATALOG_IMAGE
      - name: Upload container image
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            searchpe-bundle-container-image.tar
            searchpe-catalog-container-image.tar

  ui-e2e-tests:
    needs: [ application-container, operator-container, catalog-container ]
    name: UI E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s-version: [ v1.25.3 ]
        browser: [ chrome ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: config docker
        run: |
          echo '{"insecure-registries" : [ "localhost:5005" ]}' > /etc/docker/daemon.json
          sudo systemctl daemon-reload
          sudo systemctl restart docker
      - uses: actions/download-artifact@v3
      - name: Load and config images
        run: |
          docker load -i artifacts/searchpe-application-container-image.tar
          docker load -i artifacts/searchpe-operator-container-image.tar
          docker load -i artifacts/searchpe-bundle-container-image.tar
          docker load -i artifacts/searchpe-catalog-container-image.tar
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.7.2
        with:
          minikube version: v1.28.0
          kubernetes version: ${{ matrix.k8s-version }}
          start args: "--addons=ingress"
          github token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure Minikube
        run: |          
          # Enable ingress
          minikube addons enable ingress
          
          # Install OLM
          curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.22.0/install.sh | bash -s v0.22.0
          
          # Load images
          minikube image load quay.io/projectopenubl/searchpe:test
          minikube image load quay.io/projectopenubl/searchpe-operator:test
          minikube image load quay.io/projectopenubl/searchpe-operator-bundle:test
          minikube image load quay.io/projectopenubl/searchpe-operator-catalog:test
      - name: Configure registry
        run: |
          docker pull registry:2
          docker run -d -p 5005:5005 --restart=always --name registry registry:2
          sleep 30                    
          
          docker tag quay.io/projectopenubl/searchpe-operator-bundle:test localhost:5005/searchpe-operator-bundle:test
          docker tag quay.io/projectopenubl/searchpe-operator-catalog:test localhost:5005/searchpe-operator-catalog:test
                    
          docker push localhost:5005/searchpe-operator-bundle:test
          docker push localhost:5005/searchpe-operator-catalog:test
      - name: Install Searchpe operator
        run: |
          # Create custom catalog         
          kubectl apply -f scripts/catalog.yaml
          sleep 10
          
          # Check
          kubectl get pods -n operators --selector=olm.catalogSource=searchpe-catalog-source
          
          # Create subscription
          kubectl apply -f scripts/subscription.yaml
          sleep 10
          
          # Verify subscription
          kubectl get csv -n operators
      - name: Install Postgresql Operator
        run: |
          kubectl create -f https://operatorhub.io/install/postgresql.yaml
          sleep 60
#          PHASE=""
#          while [ "$PHASE" != "Succeeded" ]
#          do
#            PHASE=$(kubectl get csv -n operators -o jsonpath="{$.items[*].status.phase}")
#            echo "Waiting for postgresql csv. Current phase=$PHASE"
#            sleep 10;
#          done
#          echo "Postgresql operator installed"
      - name: Install DB
        run: |
          kubectl create ns openubl          
          kubectl -n openubl apply -f scripts/postgres-cluster.yaml
          
          POD_COUNT=0
          while [ $POD_COUNT -le 3 ]
          do
            POD_COUNT=$(kubectl get pods -n my-searchpe-operator -o name | wc -l)
            echo "Waiting for pods to exists. Current count=$POD_COUNT"
            sleep 10;
          done
          echo "Resources exists, now wait for them to be ready"

          kubectl wait pods -l "postgres-operator.crunchydata.com/data"="pgbackrest" -n my-searchpe-operator --for condition=Ready --timeout=-1s
          kubectl wait pods -l "postgres-operator.crunchydata.com/data"="postgres" -n my-searchpe-operator --for condition=Ready --timeout=-1s
      - name: Install Searchpe
        run: |
          kubectl -n openubl apply -f scripts/searchpe.yaml
          sleep 20;
          
          kubectl wait pods --selector "app.kubernetes.io/name"="searchpe" -n my-searchpe-operator --for condition=Ready --timeout=-1s

          external_ip=""
          while [[ -z $external_ip ]]
          do
            external_ip=$(kubectl get ingress searchpe-searchpe-ingress --template="{{range.status.loadBalancer.ingress}}{{.ip}}{{end}}" -n my-searchpe-operator);
            echo "Waiting for end point...current=$external_ip"
            sleep 10;
          done

          echo "End point ready: $external_ip"
          export endpoint=$(minikube ip);
          echo "CYPRESS_BASE_URL=https://$endpoint" >> $GITHUB_ENV
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: application/src/main/webapp
          record: false
          browser: ${{ matrix.browser }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: container-screenshots-${{ matrix.os }}-${{ matrix.browser }}
          path: application/src/main/webapp/cypress/screenshots
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: container-videos-${{ matrix.os }}-${{ matrix.browser }}
          path: application/src/main/webapp/cypress/videos

#  helm-tests:
#    name: Helm Tests
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v3
#        with:
#          java-version: 17
#          distribution: temurin
#          cache: maven
#      - uses: azure/setup-helm@v3
#      - name: Helm
#        run: |
#          mvn process-resources
#          helm lint application/target/helm/
