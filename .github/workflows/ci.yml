name: CI

on:
  push:
    branches-ignore:
      - "dependabot/**"
    paths-ignore:
      - "README.md"
  pull_request:
    paths-ignore:
      - "README.md"

jobs:
  jvm-tests:
    name: JVM Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven
      - name: Maven
        run: mvn test

  native-tests:
    name: Native Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven
      - name: Build with Maven
        run: mvn verify -Dquarkus.native.container-build=true -P native

  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 16 ]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Build
        working-directory: application/src/main/webapp
        run: |
          npm install
          npm run build
      - name: Test
        working-directory: application/src/main/webapp
        run: npm run test -- --coverage --watchAll=false

  ui-e2e-tests:
    name: UI E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s-version: [ v1.25.5 ]
        browser: [ chrome ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Build application container image
        run: |
          mvn -U -B package --file pom.xml -DskipTests \
          -Dquarkus.native.container-build=true \
          -Dquarkus.container-image.push=false \
          -Dquarkus.container-image.build=true \
          -Dquarkus.container-image.registry=quay.io \
          -Dquarkus.container-image.group=projectopenubl \
          -Dquarkus.container-image.name=searchpe \
          -Dquarkus.container-image.tag=test \
          -P native,ui \
          -pl application
      - name: Build operator container image
        run: |
          mvn -U -B package --file pom.xml -DskipTests \
          -Dquarkus.native.container-build=true \
          -Dquarkus.container-image.push=false \
          -Dquarkus.container-image.build=true \
          -Dquarkus.container-image.registry=quay.io \
          -Dquarkus.container-image.group=projectopenubl \
          -Dquarkus.container-image.name=searchpe-operator \
          -Dquarkus.container-image.tag=test \
          -P native \
          -pl operator
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.7.2
        with:
          minikube version: v1.28.0
          kubernetes version: ${{ matrix.k8s-version }}
          start args: "--addons=ingress"
      - name: Configure Minikube
        run: |
          # Enable ingress
          minikube addons enable ingress
          
          # Install OLM
          curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.22.0/install.sh | bash -s v0.22.0
      - name: Install Operators
        run: |
          kubectl create -f https://operatorhub.io/install/postgresql.yaml
          kubectl create -f https://operatorhub.io/install/searchpe-operator.yaml
          
          PHASE=""
          while [ "$PHASE" != "Succeeded" ]
          do
            PHASE=$(kubectl get csv -n operators -o jsonpath="{$.items[*].status.phase}")
            echo "Waiting for postgresql csv. Current phase=$PHASE"
            sleep 10;
          done
          echo "Postgresql operator installed"
          
          PHASE=""
          while [ "$PHASE" != "Succeeded Succeeded" ]
          do
            PHASE=$(kubectl get csv -n my-searchpe-operator -o jsonpath="{$.items[*].status.phase}")
            echo "Waiting for searchpe csv. Current phase=$PHASE"            
            sleep 10;
          done
          echo "Searchpe operator installed"
      - name: Install DB
        run: |
          cat << EOF | kubectl -n my-searchpe-operator apply -f -
          apiVersion: postgres-operator.crunchydata.com/v1beta1
          kind: PostgresCluster
          metadata:
            name: postgresql
          spec:
            postgresVersion: 14
            instances:
              - name: pg-1
                replicas: 1
                dataVolumeClaimSpec:
                  accessModes:
                    - ReadWriteOnce
                  resources:
                    requests:
                      storage: 1Gi
            backups:
              pgbackrest:
                repos:
                  - name: repo1
                    volume:
                      volumeClaimSpec:
                        accessModes:
                          - ReadWriteOnce
                        resources:
                          requests:
                            storage: 1Gi
            users:
              - name: foo
                databases:
                  - searchpedb
                options: "SUPERUSER"
          EOF
      - name: Wait for DB
        run: |
          POD_COUNT=0
          while [ $POD_COUNT -le 3 ]
          do
            POD_COUNT=$(kubectl get pods -n my-searchpe-operator -o name | wc -l)
            echo "Waiting for pods to exists. Current count=$POD_COUNT"
            sleep 10;
          done
          echo "Resources exists, now wait for them to be ready"
          
          kubectl wait pods -l "postgres-operator.crunchydata.com/data"="pgbackrest" -n my-searchpe-operator --for condition=Ready --timeout=-1s
          kubectl wait pods -l "postgres-operator.crunchydata.com/data"="postgres" -n my-searchpe-operator --for condition=Ready --timeout=-1s
      - name: Load custom operator
        run: |
          minikube image load quay.io/projectopenubl/searchpe:test
          minikube image load quay.io/projectopenubl/searchpe-operator:test
      - name: Install Searchpe
        run: |
          cat << EOF | kubectl -n my-searchpe-operator apply -f -
          kind: "Searchpe"
          apiVersion: "searchpe.openubl.io/v1alpha1"
          metadata:
            name: searchpe
          spec:
            image: quay.io/projectopenubl/searchpe:test
            sunat:
              padronReducidoUrl: https://raw.githubusercontent.com/project-openubl/searchpe/master/application/src/test/resources/padron_reducido_ruc.zip
            db:
              usernameSecret:
                name: postgresql-pguser-foo
                key: user
              passwordSecret:
                name: postgresql-pguser-foo
                key: password
              url: jdbc:postgresql://postgresql-primary.my-searchpe-operator.svc:5432/searchpedb
          EOF
      - name: Wait for Searchpe
        run: |
          kubectl wait pods --selector "app.kubernetes.io/name"="searchpe" -n my-searchpe-operator --for condition=Ready --timeout=-1s
          
          external_ip=""
          while [[ -z $external_ip ]]
          do
            external_ip=$(kubectl get ingress searchpe-searchpe-ingress --template="{{range.status.loadBalancer.ingress}}{{.ip}}{{end}}" -n my-searchpe-operator);
            echo "Waiting for end point...current=$external_ip"
            sleep 10;
          done
          
          echo "End point ready: $external_ip"
          export endpoint=$(minikube ip);
          echo "CYPRESS_BASE_URL=https://$endpoint" >> $GITHUB_ENV
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: application/src/main/webapp
          record: false
          browser: ${{ matrix.browser }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: container-screenshots-${{ matrix.os }}-${{ matrix.browser }}
          path: application/src/main/webapp/cypress/screenshots
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: container-videos-${{ matrix.os }}-${{ matrix.browser }}
          path: application/src/main/webapp/cypress/videos

#  helm-tests:
#    name: Helm Tests
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v3
#        with:
#          java-version: 17
#          distribution: temurin
#          cache: maven
#      - uses: azure/setup-helm@v3
#      - name: Helm
#        run: |
#          mvn process-resources
#          helm lint application/target/helm/
